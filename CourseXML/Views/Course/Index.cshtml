@model CityOffice


<div class="currency-header">
    <h1>@Model.Location - курсы валют</h1>
    <div class="datetime-info">
        <div>Текущая дата и время: <span id="currentDateTime">@DateTime.Now.ToString("dd.MM.yyyy HH:mm")</span></div>
        <div>Последнее обновление: <span id="lastUpdate">@DateTime.Now.ToString("dd.MM.yyyy HH:mm")</span></div>
    </div>
</div>

<table class="currency-table" id="ratesTable">
    <thead>
    <tr>
        <th>Валюта</th>
        <th>Покупка</th>
        <th>Продажа</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var currency in Model.Currencies)
    {
        <tr data-currency="@currency.Name">
            <td>
                <div class="currency-name">
                    <span class="flag-icon flag-@currency.Name.ToLower()"></span>
                    <span>@GetCurrencyName(currency.Name)</span>
                </div>
            </td>
            <td>
                <div class="value-container purchase">@currency.Purchase.ToString("N2")</div>
            </td>
            <td>
                <div class="value-container sale">@currency.Sale.ToString("N2")</div>
            </td>
        </tr>
    }
    </tbody>
</table>


@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    <script>
        // Подключение к SignalR
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/currencyHub")
            .withAutomaticReconnect({
                nextRetryDelayInMilliseconds: retryContext => {
                    // Пытаемся переподключиться каждые 5 секунд к SignalR
                    return 5000;
                }
            })
            .configureLogging(signalR.LogLevel.Information)
            .build();

        // Обработчик обновлений
        connection.on("ReceiveUpdate", (data) => {
            if (!data || !data.Currencies) {
                console.error("Некорректные данные:", data);
                return;
            }
            console.log("Данные получены:", {
                office: data.Id,
                currenciesCount: data.Currencies.length
            });
            updateRates(data);
        });

        // Функция обновления таблицы с анимацией
        function updateRates(officeData) {
            officeData.Currencies.forEach(currency => {
                const row = document.querySelector(`tr[data-currency="${currency.Name}"]`);
                if (row) {
                    // Анимация изменения значений
                    animateValueChange(row.querySelector('.purchase'), currency.Purchase);
                    animateValueChange(row.querySelector('.sale'), currency.Sale);

                    document.getElementById('lastUpdate').textContent =
                        new Date().toLocaleTimeString();
                }
            });
        }

        // Анимация изменения числа
        function animateValueChange(element, newValue) {
            const oldValue = parseFloat(element.textContent);
            if (oldValue === newValue) return;

            const duration = 500; // ms
            const startTime = performance.now();

            function updateValue(currentTime) {
                const elapsed = currentTime - startTime;
                const progress = Math.min(elapsed / duration, 1);

                const currentValue = oldValue + (newValue - oldValue) * progress;
                element.textContent = currentValue.toFixed(2);

                // Подсветка изменения
                if (progress < 1) {
                    element.style.color = newValue > oldValue ? '#4CAF50' : '#F44336';
                    requestAnimationFrame(updateValue);
                } else {
                    element.style.color = '';
                }
            }

            requestAnimationFrame(updateValue);
        }

        // Показать уведомление
        function showNotification(message) {
            // Удаляем старое уведомление, если есть
            const oldNotification = document.querySelector('.notification');
            if (oldNotification) oldNotification.remove();

            const notification = document.createElement('div');
            notification.className = 'notification';
            notification.textContent = message;
            document.body.appendChild(notification);

            setTimeout(() => {
                notification.style.opacity = '0';
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }

        // Обработчик ошибок подключения
        connection.onclose(async () => {
            console.log("Соединение закрыто, попытка переподключения...");
            await startConnection();
        });

        // Запуск подключения
        async function startConnection() {
            try {
                await connection.start();
                console.log("Подключено к SignalR");
                await connection.invoke("JoinGroup", "@Model.Id");

                // Первоначальная загрузка данных
                await fetchInitialData();
            } catch (err) {
                console.error("Ошибка подключения:", err);
                setTimeout(startConnection, 5000);
            }
        }

        // Запрос начальных данных
        async function fetchInitialData() {
            try {
                const response = await fetch(`/Course/GetOfficeRates?officeId=@Model.Id`);
                if (response.ok) {
                    const data = await response.json();
                    updateRates(data);
                }
            } catch (error) {
                console.error("Ошибка при загрузке начальных данных:", error);
            }
        }

        // Запускаем подключение
        startConnection();

        // Периодическая проверка соединения
        setInterval(() => {
            if (connection.state === signalR.HubConnectionState.Disconnected) {
                console.log("Соединение разорвано, переподключаемся...");
                startConnection();
            }
        }, 10000);


        function updateDateTime() {
            const now = new Date();

            // Форматируем дату и время в нужном формате (дд.мм.гггг чч:мм:сс)
            const day = String(now.getDate()).padStart(2, '0');
            const month = String(now.getMonth() + 1).padStart(2, '0');
            const year = now.getFullYear();
            const hours = String(now.getHours()).padStart(2, '0');
            const minutes = String(now.getMinutes()).padStart(2, '0');
            const seconds = String(now.getSeconds()).padStart(2, '0');

            document.getElementById('currentDateTime').textContent =
                `${day}.${month}.${year} ${hours}:${minutes}:${seconds}`;

            // Обновляем каждую секунду (1000 мс) вместо минуты
            setTimeout(updateDateTime, 1000);
        }

        // Запускаем сразу при загрузке страницы
        updateDateTime();
        function setTableOpacity(opacity) {
            document.documentElement.style.setProperty('--table-opacity', opacity);

            // Сохраняем значение в localStorage для сохранения между перезагрузками
            localStorage.setItem('tableOpacity', opacity);
        }

        // При загрузке страницы проверяем сохраненное значение
        document.addEventListener('DOMContentLoaded', function () {
            const savedOpacity = localStorage.getItem('tableOpacity');
            if (savedOpacity) {
                setTableOpacity(parseFloat(savedOpacity));
            }
            

        });
        updateDateTime();

    </script>
}

@functions {

    string GetCurrencyName(string code)
    {
        return code switch
        {
            "USD" => "USD",
            "EUR" => "EUR",
            "CNY" => "CNY",
            "GBP" => "GBP",
            _ => code
        };
    }

}